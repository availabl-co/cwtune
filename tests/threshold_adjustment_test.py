
# Generated by CodiumAI
from cwtune.timeseries import ThresholdAdjustment
from datetime import datetime, timezone, timedelta
from cwtune.cli import AlarmType

import unittest

class ThresholdAdjustmentTest(unittest.TestCase):

    def example_timeseries():
        start = datetime(2020, 1, 1, 0, 0, 0, tzinfo=timezone.utc)
        end = datetime(2020, 1, 1, 0, 10, 0, tzinfo=timezone.utc)

        impact_start = datetime(2020, 1, 1, 0, 2, 0, tzinfo=timezone.utc)
        impact_end = datetime(2020, 1, 1, 0, 4, 0, tzinfo=timezone.utc)

        data = []

        current_time = start
        while current_time <= end:
            if current_time >= impact_start and current_time <= impact_end:
                data.append((current_time, 100))
            else:
                data.append((current_time, 0))
            current_time += timedelta(minutes=1)

        return data

    def test__init__(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        self.assertEqual(adjustment.threshold, threshold)
        self.assertEqual(adjustment.data, data)
        self.assertEqual(adjustment.breaches, [])
        self.assertEqual(adjustment.alarm_type, alarm_type)
        self.assertEqual(adjustment.window_size, window_size)

    def test_gt_decrease_sensitivity(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.decrease_sensitivity()
        self.assertEqual(adjustment.threshold, 11)

    def test_gt_increase_sensitivity_to_min(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 1
        alarm_type = AlarmType.GREATER_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.increase_sensitivity()
        self.assertEqual(adjustment.threshold, 0)

    def test_lt_decrease_sensitivity(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.LESS_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.decrease_sensitivity()
        self.assertEqual(adjustment.threshold, 9)

    def test_gt_increase_sensitivity(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.increase_sensitivity()
        self.assertEqual(adjustment.threshold, 9)

    def test_lt_increase_sensitivity(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.LESS_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.increase_sensitivity()
        self.assertEqual(adjustment.threshold, 11)

    def test_increase_window_size(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.increase_window_size()
        self.assertEqual(adjustment.window_size, 2)

    def test_decrease_window_size(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 2
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.decrease_window_size()
        self.assertEqual(adjustment.window_size, 1)

    def test_gt_min_threshold(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 0
        alarm_type = AlarmType.GREATER_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.decrease_sensitivity()
        self.assertEqual(adjustment.threshold, 0)

    def test_lt_min_threshold(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 0
        alarm_type = AlarmType.LESS_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.increase_sensitivity()
        self.assertEqual(adjustment.threshold, 0)

    def test_max_window_size(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 60
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.increase_window_size()
        self.assertEqual(adjustment.window_size, 60)

    def test_min_window_size(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(
            threshold, [], data, alarm_type, window_size)
        adjustment.decrease_window_size()
        self.assertEqual(adjustment.window_size, 1)

    def test_breaches_1(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 1
        adjustment = ThresholdAdjustment(threshold, [], data, alarm_type, window_size)
        adjustment._recalculate_breaches()
        self.assertEqual(adjustment.breaches, [
            {
                'end': datetime(2020, 1, 1, 0, 6, tzinfo=timezone.utc),
                'start': datetime(2020, 1, 1, 0, 2, tzinfo=timezone.utc),
                'status': 'closed',
                'values': [100, 100, 100, 0]
            }
        ])

    def test_breaches_2(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 2
        adjustment = ThresholdAdjustment(threshold, [], data, alarm_type, window_size)
        adjustment._recalculate_breaches()
        self.assertEqual(adjustment.breaches, [
            {
              'end': datetime(2020, 1, 1, 0, 7, tzinfo=timezone.utc),
              'start': datetime(2020, 1, 1, 0, 2, tzinfo=timezone.utc),
              'status': 'closed',
              'values': [100, 100, 100, 0, 0]
            }
        ])

    def test_breaches_3(self):
        data = ThresholdAdjustmentTest.example_timeseries()
        threshold = 10
        alarm_type = AlarmType.GREATER_THAN
        window_size = 3
        adjustment = ThresholdAdjustment(threshold, [], data, alarm_type, window_size)
        adjustment._recalculate_breaches()
        self.assertEqual(adjustment.breaches, [
            {
              'end': datetime(2020, 1, 1, 0, 7, tzinfo=timezone.utc),
              'start': datetime(2020, 1, 1, 0, 3, tzinfo=timezone.utc),
              'status': 'closed',
              'values': [100, 100, 0, 0]
            }
        ])
